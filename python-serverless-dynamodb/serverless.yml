# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: todos-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:TransactGetItems
        - dynamodb:TransactWriteItems
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ TodosTable, Arn ]
        - "Fn::GetAtt": [ ItemsTable, Arn ]

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    FUNCTION_SHIELD_TOKEN: dGhlbGF6eWVuZ2luZXJkK3RvZG9zQGdtYWlsLmNvbQAwRQIhAISMwaB6OjTfKXbl5M1Iy8GAipgnl/+O0aWvQs65CcFpAiBtYCaNlyvKrpsFzbBXVIMRAsIuGFsIdbeDvnldMxDTUg==

# you can add packaging information here
package:
  exclude:
    - venv/**
    - node_modules/**
#  include:
#    - include-me.py
#    - include-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: GET

  hello_get:
    handler: handler.hello
    events:
      - http:
          path: hello/{id}
          method: GET

  hello_post:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: POST

  todos_list:
    handler: todos.list
    events:
      - http:
          path: todos
          method: GET
#    warmup:
#      enabled:
#        - dev
#        - staging
#        - prod

  todos_create:
    handler: todos.create
    events:
      - http:
          path: todos
          method: POST

  todos_retrieve:
    handler: todos.retrieve
    events:
      - http:
          path: todos/{id}
          method: GET

  todos_update:
    handler: todos.update
    events:
      - http:
          path: todos/{id}
          method: PATCH

  todos_delete:
    handler: todos.delete
    events:
      - http:
          path: todos/{id}
          method: DELETE


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-dynamodb-local
  - serverless-offline-python
  - serverless-plugin-warmup
  - serverless-python-requirements

custom:
  warmup:
    vpc: false
    prewarm: true
    role: LambdaWarmupRole
  tables:
    todos:
      name: todos
      readCapacity: 1
      writeCapacity: 1
    items:
      name: items
      readCapacity: 1
      writeCapacity: 1

  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 100m
      heapMax: 200m
      migrate: true

resources:
  # warmup
  - ${file(resources/warmup.yml)}

  # tables
  - ${file(resources/dynamodb-tables.yml)}
